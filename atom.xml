<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://pineapple126.github.io/</id>
    <title>深海大菠萝盖饭</title>
    <updated>2021-04-07T14:26:57.224Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://pineapple126.github.io/"/>
    <link rel="self" href="https://pineapple126.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://pineapple126.github.io/images/avatar.png</logo>
    <icon>https://pineapple126.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 深海大菠萝盖饭</rights>
    <entry>
        <title type="html"><![CDATA[元素水平、垂直居中的方式]]></title>
        <id>https://pineapple126.github.io/post/yuan-su-shui-ping-chui-zhi-ju-zhong-de-fang-shi/</id>
        <link href="https://pineapple126.github.io/post/yuan-su-shui-ping-chui-zhi-ju-zhong-de-fang-shi/">
        </link>
        <updated>2021-03-30T06:01:58.000Z</updated>
        <content type="html"><![CDATA[<p>元素在水平、垂直方向上如何实现居中效果是一个很熟悉的问题了，为了避免每次都需要去查询，因此对该问题做一个简单的总结并记录下来，方便日后查阅。</p>
<h2 id="如何让一个元素水平居中">如何让一个元素水平居中？</h2>
<p>要实现元素的水平居中效果相对较为简单的。我们假设页面的 HTML 结构如下：</p>
<pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h3 id="一-已知元素宽高使元素水平居中">一、已知元素宽高，使元素水平居中</h3>
<ol>
<li>使用 margin 实现。</li>
</ol>
<p>CSS 部分如下：</p>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
}

.inner {
    width: 200px;
    height: 200px;
    margin: 0 auto;
    background-color: pink;
}
</code></pre>
<p><code>margin: 0 auto</code> 使元素水平居中，上下的外边距为 0，左右的外边距会平均分配。当上下的外边距设置为 auto 时，效果和当前一致。</p>
<ol start="2">
<li>使用<strong>浮动</strong>实现</li>
</ol>
<p>CSS 部分如下：</p>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
}

.inner {
    width: 200px;
    height: 200px;
    position: relative;
    float: left;
    left: 50%;
    margin-left: -100px;
    background-color: pink;
}
</code></pre>
<p>设置浮动方向偏移量为 50%，再设置浮动方向外边距为宽度一半的负值，可以是元素处于水平居中的位置。</p>
<ol start="3">
<li>使用<strong>绝对定位</strong>实现</li>
</ol>
<p>CSS 部分如下：</p>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
    posistion: relative;
}

.inner {
    width: 200px;
    height: 200px;
    position: absolute;
    left: 50%;
    margin-left: -100px;
    background-color: pink;
}
</code></pre>
<p>设置 <code>position: absolute</code>，再设置任一方向偏移量为 50%，最后设置偏移方向外边距为宽度一半的负值，可以是元素处于水平居中的位置。</p>
<ol start="4">
<li>使用<strong>绝对定位</strong>+margin 实现</li>
</ol>
<p>CSS 部分如下：</p>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
    posistion: relative;
}

.inner {
    width: 200px;
    height: 200px;
    position: absolute;
    left: 0;
    right: 0;
    margin: 0 auto;
    background-color: pink;
}
</code></pre>
<p>绝对定位盒子的特性：</p>
<p>水平方向上：left+right+padding+width+margin = 包含块水平方向上padding区域的尺寸</p>
<p>当 left、right 的值为 0 时，margin 为 auto 时，可使得元素水平居中</p>
<h3 id="二-未知元素宽高使元素水平居中">二、未知元素宽高，使元素水平居中</h3>
<ol>
<li>flex 布局</li>
</ol>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
    display: flex;
    justify-content: center;
}

.inner {
    background-color: pink;
}
</code></pre>
<ol start="2">
<li>绝对定位+tranform</li>
</ol>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
    position: relative;
}

.inner {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    background-color: pink;
}
</code></pre>
<p>内部 div 相对于外部 div 进行定位，left 值为外部的 50%，然后通过 <code>transform: translateX(-50%);</code> 时元素在 x 轴上向左移动自身大小的一半。</p>
<h2 id="如何让一个元素垂直居中">如何让一个元素垂直居中？</h2>
<h3 id="一-已知元素宽高使元素垂直居中">一、已知元素宽高，使元素垂直居中</h3>
<ol>
<li>使用<strong>绝对定位</strong>实现</li>
</ol>
<p>CSS 部分如下：</p>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
    posistion: relative;
}

.inner {
    width: 200px;
    height: 200px;
    position: absolute;
    top: 50%;
    margin-top: -100px;
    background-color: pink;
}
</code></pre>
<p>设置 <code>position: absolute</code>，再设置任一方向偏移量为 50%，最后设置偏移方向外边距为宽度一半的负值，可以是元素处于垂直居中的位置。</p>
<ol start="2">
<li>使用<strong>绝对定位</strong>+margin 实现</li>
</ol>
<p>CSS 部分如下：</p>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
    posistion: relative;
}

.inner {
    width: 200px;
    height: 200px;
    position: absolute;
    top: 0;
    bottom: 0;
    margin: auto 0;
    background-color: pink;
}
</code></pre>
<p>绝对定位盒子的特性：</p>
<p>垂直方向上：top+bottom+height+padding+margin = 包含块内垂直方向上 padding 区域的尺寸</p>
<p>当 top、bottom 的值为 0 时，margin 为 auto 时，可使得元素垂直居中</p>
<h3 id="二-未知元素宽高使元素垂直居中">二、未知元素宽高，使元素垂直居中</h3>
<ol>
<li>flex 布局</li>
</ol>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
    display: flex;
    align-items: center;
}

.inner {
    background-color: pink;
}
</code></pre>
<ol start="2">
<li>绝对定位+tranform</li>
</ol>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
    position: relative;
}

.inner {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: pink;
}
</code></pre>
<p>内部 div 相对于外部 div 进行定位，top 值为外部的 50%，然后通过 <code>transform: translateY(-50%);</code> 时元素在 y 轴上向左移动自身大小的一半。</p>
<h2 id="如何让一个元素水平-垂直居中">如何让一个元素水平、垂直居中？</h2>
<h3 id="一-已知元素宽高使元素水平-垂直居中">一、已知元素宽高，使元素水平、垂直居中</h3>
<ol>
<li>使用<strong>绝对定位</strong>实现</li>
</ol>
<p>CSS 部分如下：</p>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
    posistion: relative;
}

.inner {
    width: 200px;
    height: 200px;
    position: absolute;
    top: 50%;
    left: 50%;
    margin-top: -100px;
    margin-left: -100px;
    background-color: pink;
}
</code></pre>
<p>设置 <code>position: absolute</code>，再设置任一方向偏移量为 50%，最后设置偏移方向外边距为宽度一半的负值，可以是元素处于水平、垂直居中的位置。</p>
<ol start="2">
<li>使用<strong>绝对定位</strong>+margin 实现</li>
</ol>
<p>CSS 部分如下：</p>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
    posistion: relative;
}

.inner {
    width: 200px;
    height: 200px;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    margin: auto;
    background-color: pink;
}
</code></pre>
<p>绝对定位盒子的特性：</p>
<p>水平方向上：left+right+padding+width+margin = 包含块水平方向上padding区域的尺寸<br>
垂直方向上：top+bottom+height+padding+margin = 包含块内垂直方向上padding区域的尺寸</p>
<p>当left、right、top、bottom、padding的值都为0，margin为auto时，可使得元素垂直水平居中</p>
<h3 id="二-未知元素宽高使元素垂直居中-2">二、未知元素宽高，使元素垂直居中</h3>
<ol>
<li>flex 布局</li>
</ol>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.inner {
    background-color: pink;
}
</code></pre>
<ol start="2">
<li>绝对定位+tranform</li>
</ol>
<pre><code class="language-css">.container {
    width: 500px;
    height: 500px;
    position: relative;
}

.inner {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: pink;
}
</code></pre>
<p>内部 div 相对于外部 div 进行定位，left、top 值为外部的 50%，然后通过 <code>transform: translate(-50%, -50%);</code> 时元素在 x轴、y 轴上向左向上移动自身大小的一半。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flex 布局]]></title>
        <id>https://pineapple126.github.io/post/flexible-box/</id>
        <link href="https://pineapple126.github.io/post/flexible-box/">
        </link>
        <updated>2021-03-30T03:20:09.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://pineapple126.github.io//post-images/1617117998211.png" alt="flex 布局" loading="lazy"></figure>
<h2 id="什么是-flex-布局">什么是 Flex 布局？</h2>
<p>Flex 布局就是 <strong>弹性布局</strong>（Flexible Box），用来为盒状模型提供最大的灵活性。任何一个元素都可以通过设置 <code>display: flex</code> 来实现 Flex 布局，行内元素也可以通过设置 <code>display: inline-flex</code> 来实现 Flex 布局。设置 Flex 布局后，元素的 <code>float</code>、<code>clear</code> 和 <code>vertical-align</code> 属性将会失效。</p>
<h2 id="基本概念">基本概念</h2>
<p>采用 Flex 布局的元素称为 “Flex 容器”（flex container），它的所有子元素自动成为容器元素，称为项目 （flex item）。项目可以在任意方向上排列，也可以“弹性伸缩”其尺寸。</p>
<p>容器默认存在两根轴线：水平方向的主轴（main axis）和 垂直方向的交叉轴（cross axis）。主轴开始位置叫做 <code>main start</code>，结束的位置叫做 <code>main end</code>，交叉轴开始的位置叫做 <code>cross start</code>，结束的位置叫做 <code>cross end</code>。</p>
<h2 id="容器的属性">容器的属性</h2>
<ol>
<li>flex-direction: row | row-reverse | column | column-reverse  该属性决定主轴的方向（即项目的排列方向）</li>
<li>flex-wrap: nowrap | wrap | wrap-reverse  该属性定义了主轴的换行方式</li>
<li>flex-flow: <flex-direction> || <flex-wrap>  该属性是 flex-direction 属性和 flex-wrap 属性的简写形式</li>
<li>justify-content: flex-start | flex-end | center | space-between | space-around  该属性定义了项目在主轴方向上的对齐方式</li>
<li>align-items: flex-start | flex-end | center | baseline | stretch  该属性定义了项目在交叉轴上的对齐方式</li>
<li>align-content: flex-start | flex-end | center | stretch | space-between | space-around  该属性定义了多根轴线的对齐方式</li>
</ol>
<h2 id="项目的属性">项目的属性</h2>
<ol>
<li>order: <interger>  该属性定义项目的排列顺序。数值越小，排列越靠前</li>
<li>flex-grow: <number>  该属性定义项目的放大比例，默认值为 0</li>
<li>flex-shrink: <number> 该属性定义项目的缩小比例，默认值为 1</li>
<li>flex-basis: <length> | auto  该属性定义在分配多余空间之前，项目占据的主轴空间（main size）。默认值为 auto</li>
<li>flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]  该属性是 flex-grow、flex-shrink 和 flex-basis 的缩写。默认值为 0 1 aotu。后两个属性可选。</li>
<li>align-self: auto | flex-start | flex-end | center | baseline | stretch  该属性允许单个项目有不同的对齐方式，可覆盖 align-items 属性</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leetcode —— 768. 最多能完成排序的块 II Hard]]></title>
        <id>https://pineapple126.github.io/post/leetcode-max-chunks-to-make-sorted-ii/</id>
        <link href="https://pineapple126.github.io/post/leetcode-max-chunks-to-make-sorted-ii/">
        </link>
        <updated>2021-03-29T04:30:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2>
<p><code>arr</code> 是一个可能包含<strong>重复元素</strong>的整数数组，我们将这个数组分割成几个“块”，并将这些块分别进行排序。之后再连接起来，是的连接的结果和按升序排序后的原数组相同。请求出我们最多可以将数组分成多少块?</p>
<p><strong>示例</strong></p>
<pre><code>输入: arr = [5,4,3,2,1]
输出: 1
解释:
将数组分成2块或者更多块，都无法得到所需的结果。
例如，分成 [5, 4], [3, 2, 1] 的结果是 [4, 5, 1, 2, 3]，这不是有序的数组。

输入: arr = [2,1,3,4,4]
输出: 4
解释:
我们可以把它分成两块，例如 [2, 1], [3, 4, 4]。
然而，分成 [2, 1], [3], [4], [4] 可以得到最多的块数。
</code></pre>
<h2 id="题解">题解</h2>
<h3 id="方法一滑动窗口">方法一：滑动窗口</h3>
<p>原题有一个提示：</p>
<pre><code>Each k for which some permutation of arr[:k] is equal to sorted(arr)[:k] is where we should cut each chunk.
</code></pre>
<p>即说明原数组进行分块后，每一个分块和排序后的数组中对应的分块数字是一样的，只是顺序不同。因此我们可以使用一个滑动窗口同时扫描原数组和排序数组，当窗口中数字的和一样时，就将数组进行分块。</p>
<pre><code class="language-javascript">var maxChunksToSorted = function (arr) {
  const sorted = [...arr];
  sorted.sort((a, b) =&gt; a - b);

  let count = 0,
    sum = 0;
  for (let i = 0; i &lt; arr.length; i++) {
    sum += arr[i];
    sum -= sorted[i];
    if (sum === 0) {
      count++;
    }
  }
  return count;
};
</code></pre>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(NlogN)，N 为数组长度，数组排序时间认为是 NlogN，滑动窗口遍历数组时间为 N。</li>
<li>空间复杂度：O(N)，N 为数组长度。</li>
</ul>
<h3 id="方法二辅助栈法">方法二：辅助栈法</h3>
<p>根据题意，将原数组进行分块后，对各分块分别进行排序后的结果等于原数组排序后的结果。</p>
<p>可以得到的一个结论是，每个分块中的数字相对于前一个分块都是递增的(因为有重复数字，所以也可能是相同)，下一个分块中的所有数字都会大于等于上一个分块中的所有数字。</p>
<ul>
<li>因为题目要求能分的最多的块数，所以我们在分块的时候要尽量把块分小，这样就能分得比较多。</li>
<li>在遍历数组的过程中，如果一个数字比之前所有分块的最大值都要大，我们就把它作为一个新的分块。</li>
<li>如果数字小于之前某些分块的最大值，那这些分块都要被合成一个分块(保持栈的单调递增)。</li>
</ul>
<pre><code class="language-javascript">class Stack {
  constructor() {
    this.list = [];
  }
  push(val) {
    this.list.push(val);
  }
  pop() {
    return this.list.pop();
  }
  empty() {
    return this.list.length === 0;
  }
  peek() {
    return this.list[this.list.length - 1];
  }
  size() {
    return this.list.length;
  }
}

var maxChunksToSorted = function (arr) {
  const stack = new Stack();

  for (let i of stack) {
    if (stack.empty() || stack.peek &lt;= i) {
      stack.push(i);
    } else {
      const temp = stack.pop();

      while (stack.peek() &gt; i) {
        stack.pop();
      }

      stack.push(temp);
    }
  }
  return stack.size();
};
</code></pre>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(NlogN)，N 为数组长度。</li>
<li>空间复杂度：O(N)，N 为数组长度，栈消耗的空间。</li>
</ul>
<blockquote>
<p>来源：力扣（Leetcode）<br>
链接：https://leetcode-cn.com/problems/max-chunks-to-make-sorted-ii/</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[排序算法]]></title>
        <id>https://pineapple126.github.io/post/sort-algorithm/</id>
        <link href="https://pineapple126.github.io/post/sort-algorithm/">
        </link>
        <updated>2021-03-19T03:05:08.000Z</updated>
        <content type="html"><![CDATA[<p>无论我们平时是自己写工程代码，还是刷各种算法题目，亦或是面试的时候，我们都可能避免不了要写排序算法，因此对常见的排序算法做一下总结。</p>
<table>
<thead>
<tr>
<th>排序算法</th>
<th>平均时间复杂度</th>
<th>最坏时间复杂度</th>
<th>空间复杂度</th>
<th>稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td>冒泡排序</td>
<td>O(n²)</td>
<td>O(n²)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
<tr>
<td>选择排序</td>
<td>O(n²)</td>
<td>O(n²)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>插入排序</td>
<td>O(n²)</td>
<td>O(n²)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
<tr>
<td>快速排序</td>
<td>O(nlogn)</td>
<td>O(n²)</td>
<td>O(logn)</td>
<td>不稳定</td>
</tr>
<tr>
<td>归并排序</td>
<td>O(nlogn)</td>
<td>O(nlogn)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
<tr>
<td>堆排序</td>
<td>O(nlogn)</td>
<td>O(nlogn)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>希尔排序</td>
<td>O(nlogn)</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>m</mi><mi>s</mi></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(m^s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
</tbody>
</table>
<h2 id="冒泡排序">冒泡排序</h2>
<pre><code class="language-javascript">function bubbleSort(arr) {
    for (let i = 0; i &lt; arr.length; i++) {
        for (let j = 0; j &lt; arr.length - i - 1; j++) {
            if (arr[j] &gt; arr[j + 1]) {
                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
            }
        }
    }
    return arr;
}
</code></pre>
<h2 id="选择排序">选择排序</h2>
<p>基本思想：给定一个序列，从中找到最小的一个放到序列的第一个位置，再从剩下的 n-1 个中找到最小的放到第二个位置。直到剩下最后一个元素就直接放在最后的位置，排序结束。</p>
<pre><code class="language-javascript">function selectSort(arr) {
    for (let i = 0; i &lt; arr; i++) {
        let temp = arr[i],
        pos = i;

        for (let j = i + 1; j &lt; size; j++) {
            if (arr[j] &lt; temp) {
                pos = j;
                temp = arr[j];
            }
        }
        arr[pos] = arr[i];
        arr[i] = temp;
    }
    return arr;
}
</code></pre>
<h2 id="插入排序">插入排序</h2>
<p>基本思想：将数组的第一位视为一个有序数组，将剩下的待排序数组逐个插入到已排序数组中。</p>
<pre><code class="language-javascript">function insertSort(arr) {
    for (let i=1; i &lt; arr.length; i++) {
        let j = i,
            temp = arr[j];
        while (j &gt; 0 &amp;&amp; temp &lt; arr[j]) {
            temp = arr[j];
            j--;
        }
        arr[j] = temp;
    }
    return arr;
}
</code></pre>
<h2 id="快速排序">快速排序</h2>
<p>基本思想：采用分治的思想，选取一个基准，将待排序数组分为两个小、大数组，不断重复这个过程直至数组有序。</p>
<p>基本步骤：</p>
<ol>
<li>选取基准（pivot）；</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ol>
<pre><code class="language-javascript">function quickSort(arr, left, right) {
    let len = arr.length;
    left = typeof left != &quot;number&quot; ? 0 : left,
    right = typeof right != &quot;number&quot; ? len - 1 : right;
    
    if (left &lt; right) {
        let pivot = partition(arr, left, right);
        quickSort(arr, left, pivot - 1);
        quickSort(arr, pivot + 1, right);
    }
    return arr;
}

function partition(arr, left, right) {
    let pivot = arr[left];
    while (left &lt; right) {

        while (left &lt; right) {
            if (pivot &lt; arr[right]) {
                right--;
            } else {
                arr[left] = arr[right];
                break;
            }
        }

        while (left &lt; right) {
            if (pivot &gt;= arr[left]) {
                left++;
            } else {
                arr[right] = arr[left];
                break;
            }
        }
    }
    arr[left] = pivot;
    return left;
}
</code></pre>
<h2 id="归并排序">归并排序</h2>
<p>基本思想：采取分治的思想，将两个有序数组合并为一个有序数组。</p>
<pre><code class="language-javascript">function mergeSort(arr) {
    if (arr.length &lt; 2) return arr;
    let res = [];
    let mid = arr.length &gt;&gt; 1;
    let left = mergeSort(arr.slice(0, mid)),
        right = mergeSort(arr.slice(mid));
    while (left.length &amp;&amp; right.length) {
        if (left[0] &lt; right[0]) {
            res.push(left.shift());
        } else {
            res.push(right.shift());
        }
    }
    return res.concat(left, right);
}
</code></pre>
<h2 id="堆排序">堆排序</h2>
<h2 id="希尔排序">希尔排序</h2>
<p>希尔排序实质上就是步长不定的插入排序。<br>
步长从 n/2 开始，并且总是以 1 结束。</p>
<p>希尔排序也是一种<em>插入排序</em>，它是简单插入排序经过改进之后的一个更高效的版本，也成为<strong>缩小增量排序</strong>，同时该算法是冲破 O(n²) 的第一批算法之一。</p>
<p>基本思想：希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键字越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止。</p>
<p>基本步骤：选择起始增量 <code>gap = length/2</code>，分组。然后继续以 <code>gap = gap/2</code> 的方式更新增量和分组。这种增量选择我们可以用一个序列来表示，{n/2, (n/2)/2, ..., 1}，称为<strong>增量序列</strong>。</p>
<pre><code class="language-javascript">function shellSort(arr) {
    // 增量 gap，并逐渐缩小增量
    for (let gap = arr.length &gt;&gt;&gt; 1; gap &gt; 0; gap &gt;&gt;&gt;= 2) {
        // 从第 gap 个元素，逐渐对其所在组进行直接插入排序操作
        for (let i = gap; i &lt; arr.length; i++) {
            let j = i,
                temp = arr[j];
            while (j - gap &gt;= 0 &amp;&amp; temp &lt; arr[j - gap]) {
                arr[j] = arr[j - gap];
                j -= gap;
            }
            arr[j] = temp;
        }
    }
    return arr;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《算法（第4版）》读书笔记——第 1 章 基础]]></title>
        <id>https://pineapple126.github.io/post/algorithms-fourth-edition-basics/</id>
        <link href="https://pineapple126.github.io/post/algorithms-fourth-edition-basics/">
        </link>
        <updated>2021-01-17T06:30:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="本周任务">本周任务</h2>
<p>基础数据类型/排序/树/正则表达式<br>
第 1 章/第 2 章/第 3 章/第 5 章</p>
<h2 id="第-1-章-基础">第 1 章 基础</h2>
<p>和算法关系最紧密的是数据结构，即便于算法操作的组织数据的方法。</p>
<ul>
<li>1.1 总结相关语法、语言特性和书中将会用到的库。</li>
<li>1.2 介绍用 Java 实现<strong>抽象数据类型</strong>的过程，包括定义它的应用程序编程接口（API）然后通过 Java 的类机制来实现它以供各种用例使用。</li>
<li>1.3 用数组、变长数组和链表实现<strong>背包、队列和栈</strong>的 API。</li>
<li>1.4 分析算法<strong>性能</strong>的方法。</li>
</ul>
<p><strong>算法</strong>，编写一段计算机程序一般都是实现一种已有的方法来解决某个问题。这种方法大多和使用的编程语言无关——它适用于各种计算机以及编程语言。是这种方法而非计算机程序本身描述了解决问题的步骤。**在计算机科学领域，我们用算法这个词来描述一种有限、确定、有效的并适合用计算机程序来实现的解决问题的方法。**算法是计算机科学的基础，是这个领域的核心。</p>
<p>我们关注的大多数算法都需要适当地组织数据，而为了组织数据就产生了<strong>数据结构</strong>，数据结构也是计算机科学研究地核心对象，它和算法的关系非常密切。在本书中，我们的观点是数据结构是算法的副产品或是结果，因为要理解算法必须学习数据结构。简单的算法也会产生复杂的数据结构，相应地，复杂的算法也许只需要简单的数据结构。</p>
<p>当用计算机解决一个问题时，一般都存在多种不同的方法。对于小型问题，只要管用，方法的不同并没有什么关系。但是对于大型问题（或者是需要解决大量小型问题的应用），我们就需要设计能够有效利用时间和空间的方法了。</p>
<p>无论在任何应用领域，精心设计算法都是解决大型问题最有效的方法。</p>
<h3 id="11-基础编程模型">1.1 基础编程模型</h3>
<p>使用程序来描述算法的好处：</p>
<ul>
<li>程序是对算法精确、优雅和完全的描述；</li>
<li>可以通过运行程序来学习算法的各种性质；</li>
<li>可以在应用程序中直接使用这些算法；</li>
</ul>
<h4 id="111-基本结构">1.1.1 基本结构</h4>
<ul>
<li>原始数据类型：它们在计算机程序中精确地定义整数、浮点数和布尔值等。它们的定义包括取值范围和能够对相应的值进行的操作，它们能够被组合为类似于数学公式定义的表达式。</li>
<li>语句：语句通过创建变量对其赋值、控制运行流程或者引发副作用来进行计算。我们会使用六种语句：声明、赋值、条件、循环、调用和返回。</li>
<li>数组：数组是多个同种数据类型的值的集合。</li>
<li>静态方法：静态方法可以封装并重用代码，使我们可以用独立的模块开发程序。</li>
<li>字符串：字符串是一连串的字符，Java 内置了对他们的一些操作。</li>
<li>标准输入/输出：标准输入输出是程序与外界联系的桥梁。</li>
<li>数据抽象：数据抽象封装和重用代码，使我们可以定义非原始数据类型，进而支持面向对象编程。</li>
</ul>
<h4 id="112-原始数据类型与表达式">1.1.2 原始数据类型与表达式</h4>
<p>数据类型就是一组数据和对其所能进行的操作的集合。以下是 4 种 Java 语言最基本的原始数据类型：</p>
<ul>
<li>整型，及其算术运算符（int）；</li>
<li>双精度实数类型，及其算术运算符（double）；</li>
<li>布尔型，它的值（true，false）及其逻辑操作（boolean）；</li>
<li>字符型，它的值是你能够输入的英文字母数字字符和符号（char）。</li>
</ul>
<p>Java 程序的基本组成</p>
<table>
<thead>
<tr>
<th>术语</th>
<th>例子</th>
<th>定义</th>
</tr>
</thead>
<tbody>
<tr>
<td>原始数据类型</td>
<td>int double boolean char</td>
<td>一组数据和对其所能进行的操作的集合（Java 语言内置）</td>
</tr>
<tr>
<td>标识符</td>
<td>a abc Ab$ a_b ab123 lo hi</td>
<td>由字母、数字、下划线和 $ 组成的字符串，首字符不能是数字</td>
</tr>
<tr>
<td>变量</td>
<td>【 任意标识符】</td>
<td>表示某种数据类型的值</td>
</tr>
<tr>
<td>运算符</td>
<td>+ - * /</td>
<td>表示某种数据类型的运算</td>
</tr>
<tr>
<td>字面量</td>
<td></td>
<td>值在源代码中的表示</td>
</tr>
<tr>
<td>表达式</td>
<td>lo + (hi - lo) / 2</td>
<td>字面量、变量或是能够计算出结果的一串字面量、变量和运算符的组合</td>
</tr>
</tbody>
</table>
<h4 id="113-语句">1.1.3 语句</h4>
<p>语句能够通过创建和操作变量、对变量赋值并控制这些操作的执行流程来描述运算。语句通常会被组织成代码段，即花括号中的一系列语句。</p>
<ul>
<li>声明语句：创建某种类型的变量并用标识符为其命名。</li>
<li>赋值语句：将（有表达式产生的）某种类型的数值赋予一个变量。Java 还有一些隐式赋值的语法可以使某个变量的值相对于当前值发生变化，例如将一个整型值加 1。</li>
<li>条件语句：能够简单地改变执行流程——根据指定的条件执行两个代码段之一。</li>
<li>循环语句：更彻底地改变执行流程——只要条件为真就不断地反复执行代码段中的语句。</li>
<li>调用和返回语句：和静态方法有关，是改变执行流程和代码组织地另一种方式。</li>
</ul>
<p>程序就是由一系列声明、赋值、条件、循环、调用和返回语句组成的。</p>
<h4 id="116-递归">1.1.6 递归</h4>
<p>编写递归代码时最重要的有以下三点：</p>
<ul>
<li>递归总有一个简单的情况——方法的第一条语句总是一个包含 return 的条件语句。</li>
<li>递归调用总是去尝试解决一个规模更小的子问题，这样递归才能收敛到最简单的情况。</li>
<li>递归调用的父问题和尝试解决的子问题之间不应该有交集。</li>
</ul>
<p><strong>模块化编程的好处：</strong></p>
<ul>
<li>程序整理的代码量很大时，每次处理的模块大小仍然适中；</li>
<li>可以共享和重用代码而无需重新实现；</li>
<li>很容易用改进的实现替换老的实现；</li>
<li>可以为解决编程问题建立合适的抽象模型；</li>
<li>缩小调试范围</li>
</ul>
<h4 id="1111-展望">1.1.11 展望</h4>
<p>使用<strong>数据抽象</strong>的原因：</p>
<ul>
<li>数据抽象允许我们通过模块化编程复用代码。</li>
<li>数据抽象是我们可以轻易构造多种所谓的链式数据结构，它们比数组更灵活，在许多情况下都是高效算法的基础。</li>
<li>借助数据抽象我们可以准确地定义所面对的算法问题。</li>
</ul>
<h2 id="第-2-章-排序">第 2 章 排序</h2>
<p>排序就是将一组对象按照某种逻辑顺序重新排列的过程。</p>
<p>学习排序算法的三大实际意义：</p>
<ul>
<li>对排序算法的分析将有助于全面理解本书中比较性能的方法；</li>
<li>类似的技术也能有效解决其他类型的问题；</li>
<li>排序算法常常是我们解决其他问题的第一步。</li>
</ul>
<h3 id="21-初级排序算法">2.1 初级排序算法</h3>
<h4 id="212-选择排序">2.1.2 选择排序</h4>
<p>一种最简单的排序算法是这样的：</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript Source Map 是什么？]]></title>
        <id>https://pineapple126.github.io/post/javascript-source-map/</id>
        <link href="https://pineapple126.github.io/post/javascript-source-map/">
        </link>
        <updated>2020-11-18T13:12:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-什么是-source-map">一、什么是 Source Map ?</h2>
<p>顾名思义，Source Map 是保存源代码映射关系的文件，相信用过 webpack 的开发者对它应该不会陌生。在项目开发完进行打包后，在打包的文件里通常除了 js、css、图片字体等资源文件外，大家一定还见过 xxx.js.map 的文件。这种带 map 的后缀的文件就是 Source Map 文件 —— 它就是一个位置文件，保存了源代码和转换之后代码的位置关系。下图展示了部分打包之后生成的 Source Map 文件：</p>
<figure data-type="image" tabindex="1"><img src="https://pineapple126.github.io//post-images/1605715644396.png" alt="source_map" loading="lazy"></figure>
<h2 id="二-为什么要使用-source-map">二、为什么要使用 Source Map ？</h2>
<p>明白了什么是 Source Map 之后，可是我们为什么要使用 Source Map 呢？由于现代前端项目的发展，前端代码变得越来越庞大和复杂。大部分源码都需要经过转换，才能投入到生产环境中使用。常见的转换过程包括但不限于：</p>
<ul>
<li>压缩混淆（UglifyJS）</li>
<li>编译（TypeScript，CoffeeScript）</li>
<li>转译（Babel）</li>
<li>合并多个文件，减少带宽请求</li>
</ul>
<p>经过上述转换的代码，往往都会变得面目全非，就像下面这样：</p>
<figure data-type="image" tabindex="2"><img src="https://pineapple126.github.io//post-images/1605717052787.png" alt="source_map_after" loading="lazy"></figure>
<p>这样虽然对带宽很友好，但是调试起来就不是那么轻松了。我们在代码出错的时候，肯定最希望能定位其在源码中的位置。比如下面这两个错误提示：</p>
<figure data-type="image" tabindex="3"><img src="https://pineapple126.github.io//post-images/1605717160418.png" alt="source_map_error" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://pineapple126.github.io//post-images/1605717173913.png" alt="source_map_error_with_sourcemap" loading="lazy"></figure>
<p>对于大多数开发者来说，希望看到的应该是第二种提示方式，而这就是Source Map能够输出的能力。有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码。这无疑给开发者带来了很大方便。</p>
<h2 id="三-source-map-文件的格式及含义">三、Source Map 文件的格式及含义</h2>
<pre><code class="language-json">{
    &quot;version&quot;: 3,
    &quot;file&quot;: &quot;out.js&quot;,
    &quot;sourceRoot&quot;: &quot;&quot;,
    &quot;sources&quot;: [
        &quot;log,js&quot;,
        &quot;main.js&quot;
    ],
    &quot;names&quot;: [
        &quot;sayHello&quot;,
        &quot;name&quot;,
        &quot;length&quot;,
        &quot;substr&quot;,
        &quot;console&quot;,
        &quot;log&quot;
    ],
    &quot;mappings&quot;: &quot;AAAA,SAASA,SAAUC&quot;
}
</code></pre>
<p>整个文件就是一个 JSON 对象，可以被解释器读取。他主要有以下几个属性：</p>
<ul>
<li>version：Source Map 的版本，目前为 3。</li>
<li>file：转换后的文件名。</li>
<li>sourceRoot：转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空。</li>
<li>sources：转换前的文件。该项是一个数组，表示可能存在多个文件合并。</li>
<li>names：转换前的所有变量名和属性名。</li>
<li>mappings：记录位置信息的字符串。</li>
</ul>
<p><strong>mappings 属性</strong></p>
<p>下面才是真正有趣的部分：两个文件的各个位置是如何一一对应的。</p>
<p>关键就是 map 文件的 mappings 属性。这是一个很长的字符串，它分成三层。</p>
<ul>
<li>第一层是<strong>行对应</strong>，以分号（；）表示，每个分号对应转换后源码的一行。所以，第一个分号前的内容，就对应源码的第一行，以此类推。</li>
<li>第二层是<strong>位置对应</strong>，以逗号（，）表示，每个逗号对应转换后源码的一个位置。所以，第一个逗号前的内容，就对应该行源码的第一个位置，以此类推。</li>
<li>第三层是<strong>位置转换</strong>，以 <strong>VLQ 编码</strong>表示，代表该位置对应的转换前的源码位置。</li>
</ul>
<p>举例来说，假定mappings属性的内容如下：</p>
<pre><code>mappings:&quot;AAAAA,BBBBB;CCCCC&quot;
</code></pre>
<p>就表示，转换后的源码分成两行，第一行有两个位置，第二行有一个位置。</p>
<p><strong>位置对应的原理</strong></p>
<p>每个位置使用五位，表示五个字段。</p>
<p>从左边算起，</p>
<ul>
<li>第一位，表示这个位置在（转换后的代码的）的第几列。<strong>输出文件列位置</strong></li>
<li>第二位，表示这个位置属于sources属性中的哪一个文件。<strong>输入文件名索引</strong></li>
<li>第三位，表示这个位置属于转换前代码的第几行。<strong>输入文件行号</strong></li>
<li>第四位，表示这个位置属于转换前代码的第几列。<strong>输入文件列号</strong></li>
<li>第五位，表示这个位置属于names属性中的哪一个变量。<strong>字符索引</strong></li>
</ul>
<p>有几点需要说明。首先，所有的值都是以 0 作为基数的。其次，第五位不是必需的，如果该位置没有对应 names 属性中的变量，可以省略第五位。再次，每一位都采用 VLQ 编码表示；由于 VLQ 编码是变长的，所以每一位可以由多个字符构成。</p>
<p>如果某个位置是 AAAAA，由于 A 在 VLQ 编码中表示 0，因此这个位置的五个位实际上都是 0。它的意思是，该位置在转换后代码的第 0 列，对应 sources 属性中第 0 个文件，属于转换前代码的第 0 行第 0 列，对应 names 属性中的第 0 个变量。</p>
<h2 id="vlq-编码">VLQ 编码</h2>
<p><strong>定义</strong></p>
<blockquote>
<p>A variable-length quantity (VLQ) is a universal code that uses an arbitrary number of binary octets (eight-bit bytes) to represent an arbitrarily large integer.<br>
翻译一下：VLQ是用任意个2进制字节组去表示一个任意数字的编码形式。</p>
</blockquote>
<p>VLQ 的编码形式很多，这篇文章中要说明的是下面这种：</p>
<figure data-type="image" tabindex="5"><img src="https://pineapple126.github.io//post-images/1605719630938.png" alt="VLQ_code" loading="lazy"></figure>
<ul>
<li>一个组包含 6 个二进制位。</li>
<li>在每组的第一位 C 用来标识其后面是否会跟着另一个 VLQ 字节组，值为 0 表示其是最后一个 VLQ 字节组，值为 1 表示后面还跟着另一个 VLQ 字节组。</li>
<li>在第一组中，最后 1 位用来表示符号，值为 0 则表示正数，为 1 表示负数。其他组的最后一位都是表示数字。</li>
<li>其他位都是表示数字。</li>
</ul>
<p>这种编码方式也成为 Base64 VLQ 编码，因为每一个组对应一个 Base64 编码。</p>
<figure data-type="image" tabindex="6"><img src="https://pineapple126.github.io//post-images/1605719957709.png" alt="VLQ_base64" loading="lazy"></figure>
<p>参考文章</p>
<ul>
<li>[1] <a href="https://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html">JavaScript Source Map 详解</a></li>
<li>[2] <a href="https://juejin.im/post/6844903869928079373">深入理解 SourceMap</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode 每日一题 2020.11.12 —— 922. 按奇偶排序数组 II Easy]]></title>
        <id>https://pineapple126.github.io/post/leetcode-sort-array-by-parity-ii/</id>
        <link href="https://pineapple126.github.io/post/leetcode-sort-array-by-parity-ii/">
        </link>
        <updated>2020-11-12T09:17:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2>
<p>给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。</p>
<p>对数组进行排序，以便当 A[i] 为奇数时，i 也是奇数；当 A[i] 为偶数时， i 也是偶数。</p>
<p>你可以返回任何满足上述条件的数组作为答案。</p>
<p><strong>示例</strong></p>
<pre><code>输入：[4,2,5,7]
输出：[4,5,2,7]
解释：[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。
</code></pre>
<h2 id="题解">题解</h2>
<h3 id="方法一两次遍历">方法一：两次遍历</h3>
<p>遍历一遍数组把所有的偶数放进 <code>even</code> 数组内，再遍历一遍数组把所有的奇数放进 <code>odd</code> 数组内。</p>
<pre><code class="language-javascript">var sortArrayByParityII = function(A) {
  const odd = A.filter(val =&gt; (val &amp; 1) === 1);
  const even = A.filter(val =&gt; (val &amp; 1) === 0);
  const ans = [];
  for (let i=0; i&lt;A.length/2; i++) {
    ans.push(even.shift(), odd.shift());
  }
  return ans;
};
</code></pre>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(N)，其中 N 是数组 <code>A</code> 的长度。</li>
<li>空间复杂度：O(N)。</li>
</ul>
<h3 id="方法二双指针">方法二：双指针</h3>
<p>如果原数组可以修改，则可以使用就地算法求解。</p>
<p>为数组的偶数下标部分和奇数下标部分分别维护指针 i, j。随后，在每一步中，如果 A[i] 为奇数，则不断地向前移动 j（每次移动两个单位），直到遇见下一个偶数。此时，可以直接将 A[i] 与 A[j] 交换。我们不断进行这样的过程，最终能够将所有的整数放在正确的位置上。</p>
<pre><code class="language-javascript">var sortArrayByParityII = function(A) {
    const len = A.length;
    let j = 1;
    for (let i=0; i&lt;len; i+=2) {
        if (A[i] &amp; 1) {
            while (A[j] &amp; 1) {
                j += 2;
            }
            [A[i], A[j]] = [A[j], A[i]];
        }
    }
    return A;
};
</code></pre>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(N)，其中 N 是数组 <code>A</code> 的长度。</li>
<li>空间复杂度：O(1)。不考虑输出数组的空间占用。</li>
</ul>
<blockquote>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/sort-array-by-parity-ii</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode 每日一题 2020.11.9 —— 973. 最接近原点的 K 个点]]></title>
        <id>https://pineapple126.github.io/post/leetcode-k-closest-points-to-origin/</id>
        <link href="https://pineapple126.github.io/post/leetcode-k-closest-points-to-origin/">
        </link>
        <updated>2020-11-09T15:38:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2>
<p>我们有一个由平面上的点组成的列表 points。需要从中找出 K 个距离原点 (0, 0) 最近的点。</p>
<p>（这里，平面上两点之间的距离是欧几里德距离。）</p>
<p>你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。</p>
<p><strong>示例</strong></p>
<pre><code>输入：points = [[1,3],[-2,2]], K = 1
输出：[[-2,2]]
解释： 
(1, 3) 和原点之间的距离为 sqrt(10)，
(-2, 2) 和原点之间的距离为 sqrt(8)，
由于 sqrt(8) &lt; sqrt(10)，(-2, 2) 离原点更近。
我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。
</code></pre>
<h2 id="题解">题解</h2>
<h3 id="排序">排序</h3>
<p>将每个点到原点的欧几里得距离的平方从小到大排序后，取出前 K 个即可。</p>
<pre><code class="language-javascript">var kClosest = function(points, K) {
    const getDistance = (point) =&gt; {
        return Math.pow(point[0], 2) + Math.pow(point[1], 2);
    }
    points.sort((a, b) =&gt; {
        return getDistance(a) - getDistance(b);
    });
    return points.slice(0, K);
};
</code></pre>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(nlogn)，其中 n 是数组 points 的长度。算法的时间复杂度即排序的时间复杂度。</li>
<li>空间复杂度：O(logn)，排序所需额外的空间复杂度为 O(logn)。</li>
</ul>
<blockquote>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/k-closest-points-to-origin</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「前端进阶」JS中的栈内存堆内存]]></title>
        <id>https://pineapple126.github.io/post/stack-memery-and-heap-memery-in-js/</id>
        <link href="https://pineapple126.github.io/post/stack-memery-and-heap-memery-in-js/">
        </link>
        <updated>2020-11-08T10:32:31.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>文章来源于掘金，作者 云中桥</p>
</blockquote>
<h2 id="引言">引言</h2>
<p>JS的内存空间分为栈(stack)、堆(heap)、池(一般也会归类为栈中)。</p>
<p>其中栈存放变量，堆存放复杂对象，池存放常量，所以也叫常量池。</p>
<h2 id="栈数据结构">栈数据结构</h2>
<p>栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端称为栈顶。<br>
栈被称为是一种后入先出（LIFO，last-in-first-out）的数据结构。<br>
由于栈具有后入先出的特点，所以任何不在栈顶的元素都无法访问。<br>
为了得到栈底的元素，必须先拿掉上面的元素。<br>
在这里，为方便理解，通过类比乒乓球盒子来分析栈的存取方式。</p>
<figure data-type="image" tabindex="1"><img src="https://pineapple126.github.io//post-images/1604846528569.jpg" alt="stack_structure" loading="lazy"></figure>
<p>这种乒乓球的存放方式与栈中存取数据的方式如出一辙。<br>
处于盒子中最顶层的乒乓球 5，它一定是最后被放进去，但可以最先被使用。<br>
而我们想要使用底层的乒乓球 1，就必须将上面的 4 个乒乓球取出来，让乒乓球1处于盒子顶层。<br>
这就是栈空间先进后出，后进先出的特点。</p>
<h2 id="堆数据结构">堆数据结构</h2>
<p>堆是一种经过排序的树形数据结构，每个结点都有一个值。通常我们所说的堆的数据结构，是指二叉堆。堆的特点是根结点的值最小（或最大），且根结点的两个子树也是一个堆。由于堆的这个特性，常用来实现优先队列，堆的存取是随意，这就如同我们在图书馆的书架上取书，虽然书的摆放是有顺序的，但是我们想取任意一本时不必像栈一样，先取出前面所有的书，我们只需要关心书的名字。</p>
<h2 id="变量类型与内存的关系">变量类型与内存的关系</h2>
<h3 id="基本数据类型">基本数据类型</h3>
<p>基本数据类型共有 7 种：</p>
<ol>
<li>null</li>
<li>undefined</li>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>symbol</li>
<li>bigint</li>
</ol>
<p>基本数据类型保存在栈内存中，因为基本数据类型占用空间小、大小固定，通过按值来访问，属于被频繁使用的数据。</p>
<p>为了更好的搞懂基本数据类型变量与栈内存，我们结合以下例子与图解进行理解：</p>
<pre><code class="language-javascript">let num1 = 1;
let num2 = 1;
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://pineapple126.github.io//post-images/1604846803112.jpg" alt="stack_example" loading="lazy"></figure>
<p>PS: 需要注意的是闭包中的基本数据类型变量不保存在栈内存中，而是保存在堆内存中。这个问题，我们后文再说。</p>
<h3 id="引用数据类型">引用数据类型</h3>
<p>Array,Function,Object...可以认为除了上文提到的基本数据类型以外，所有类型都是引用数据类型。</p>
<p>引用数据类型存储在堆内存中，因为引用数据类型占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</p>
<p>为了更好的搞懂变量对象与堆内存，我们结合以下例子与图解进行理解。</p>
<pre><code class="language-javascript">// 基本数据类型-栈内存
let a1 = 0;
// 基本数据类型-栈内存
let a2 = 'this is string';
// 基本数据类型-栈内存
let a3 = null;

// 对象的指针存放在栈内存中，指针指向的对象存放在堆内存中
let b = { m: 20 };
// 数组的指针存放在栈内存中，指针指向的数组存放在堆内存中
let c = [1, 2, 3];
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://pineapple126.github.io//post-images/1604846889629.jpg" alt="heap_example" loading="lazy"></figure>
<p>因此当我们要访问堆内存中的引用数据类型时，实际上我们首先是从变量中获取了该对象的地址指针， 然后再从堆内存中取得我们需要的数据。</p>
<h2 id="从内存角度来看变量复制">从内存角度来看变量复制</h2>
<h3 id="基本数据类型的复制">基本数据类型的复制</h3>
<pre><code class="language-javascript">let a = 20;
let b = a;
b = 30;
console.log(a); // 此时 a 的值是多少，是 30？还是 20？
</code></pre>
<p>答案是：20</p>
<p>在这个例子中，a、b 都是基本类型，它们的值是存储在栈内存中的，a、b 分别有各自独立的栈空间， 所以修改了 b 的值以后，a 的值并不会发生变化。</p>
<p>从下图可以清晰的看到变量是如何复制并修改的。</p>
<figure data-type="image" tabindex="4"><img src="https://pineapple126.github.io//post-images/1604847075199.jpg" alt="basic_data_type_copy" loading="lazy"></figure>
<h3 id="引用数据类型的复制">引用数据类型的复制</h3>
<pre><code class="language-javascript">let m = { a: 10, b: 20 };
let n = m;
n.a = 15;
console.log(m.a) //此时m.a的值是多少，是10？还是15？
</code></pre>
<p>答案是：15</p>
<p>在这个例子中，m、n都是引用类型，栈内存中存放地址指向堆内存中的对象，引用类型的复制会为新的变自动分配一个新的值保存在变量中，但只是引用类型的一个地址指针而已，实际指向的是同一个对象，所以修改 n.a 的值后，相应的 m.a 也就发生了改变。</p>
<p>从下图可以清晰的看到变量是如何复制并修改的。</p>
<figure data-type="image" tabindex="5"><img src="https://pineapple126.github.io//post-images/1604847155965.jpg" alt="reference_data_type_copy" loading="lazy"></figure>
<h2 id="栈内存和堆内存的优缺点">栈内存和堆内存的优缺点</h2>
<p>在JS中，基本数据类型变量大小固定，并且操作简单容易，所以把它们放入栈中存储。引用类型变量大小不固定，所以把它们分配给堆中，让他们申请空间的时候自己确定大小，这样把它们分开存储能够使得程序运行起来占用的内存最小。</p>
<p>栈内存由于它的特点，所以它的系统效率较高。堆内存需要分配空间和地址，还要把地址存到栈中，所以效率低于栈。</p>
<h2 id="栈内存和堆内存的垃圾回收">栈内存和堆内存的垃圾回收</h2>
<p>栈内存中变量一般在它的当前执行环境结束就会被销毁被垃圾回收制回收， 而堆内存中的变量则不会，因为不确定其他的地方是不是还有一些对它的引用。 堆内存中的变量只有在所有对它的引用都结束的时候才会被回收。</p>
<h2 id="闭包与堆内存">闭包与堆内存</h2>
<p>闭包中的变量并不保存中栈内存中，而是保存在堆内存中。 这也就解释了函数调用之后之后为什么闭包还能引用到函数内的变量。</p>
<p>我们先来看什么是闭包：</p>
<pre><code class="language-javascript">function A() {
  let a = 1;
  function B() {
      console.log(a);
  }
  return B;
}
let res = A();
</code></pre>
<p>函数 A 返回了一个函数 B，并且函数 B 中使用了函数 A 的变量，函数 B 就被称为闭包。</p>
<p>函数 A 弹出调用栈后，函数 A 中的变量这时候是存储在堆上的，所以函数B依旧能引用到函数A中的变量。现在的 JS 引擎可以通过逃逸分析辨别出哪些变量需要存储在堆上，哪些需要存储在栈上。</p>
<pre><code>读者注释：作者此处对于闭包的定义不是很准确，闭包不应该简单地理解成
调用外部函数变量并且被外部函数返回的内部函数，闭包是一个变量对象，
储存着被 被外部函数返回的内部函数 引用着的 外部函数的变量。

以作者给出的例子来讲，内部函数 B 引用着外部函数 A 的变量 a，并且内部
函数 B 被外部函数 A 返回。那么我们称变量集合 { a } 是函数 A 的闭包。
</code></pre>
<blockquote>
<p>本文完</p>
</blockquote>
<blockquote>
<p>作者：云中桥<br>
链接：https://juejin.im/post/6844903873992196110<br>
来源：掘金</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode 每日一题 2020.11.8 —— 122. 买卖股票的最佳时机 II]]></title>
        <id>https://pineapple126.github.io/post/leetcode-mai-mai-gu-piao-de-zui-jia-shi-ji-ii-by-beney-2/</id>
        <link href="https://pineapple126.github.io/post/leetcode-mai-mai-gu-piao-de-zui-jia-shi-ji-ii-by-beney-2/">
        </link>
        <updated>2020-11-07T16:22:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2>
<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>
<p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p><strong>示例</strong></p>
<pre><code>输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
</code></pre>
<h2 id="题解">题解</h2>
<h3 id="方法一动态规划">方法一：动态规划</h3>
<p>考虑到「不能同时参与多笔交易」，因此每天交易结束后只可能存在手里有一支股票或者没有股票的状态。</p>
<p>定义状态 <code>dp[i][0]</code> 表示第 i 天交易完后手里没有股票的最大利润，<code>dp[i][1]</code> 表示第 i 天交易完后手里持有一直股票的最大利润（i 从 0 开始）。</p>
<p>考虑 <code>dp[i][0]</code> 的转移方程，如果这一天交易完后手里没有股票，那么可能的转移状态为前一天已经没有股票，即 <code>dp[i-1][0]</code>，或者前一天结束的时候手里持有一支股票，即 <code>dp[i-1][1]</code>，这时候我们要将其卖出，并获得 <code>prices[i]</code> 的收益。因此为了收益最大化，我们列出如下的转移方程：</p>
<pre><code>dp[i][0] = max{dp[i-1][0], dp[i-1][1] + prices[i]}
</code></pre>
<p>再来考虑 <code>dp[i][1]</code>，按照同样的方式考虑转移状态，那么可能的转移状态为前一天已经持有一支股票，即 <code>dp[i−1][1]</code>，或者前一天结束时还没有股票，即 <code>dp[i−1][0]</code>，这时候我们要将其买入，并减少 <code>prices[i]</code> 的收益。可以列出如下的转移方程：</p>
<pre><code>dp[i][1]=max{dp[i−1][1],dp[i−1][0]−prices[i]}
</code></pre>
<p>对于初始状态，根据状态定义我们可以知道第 0 天交易结束的时候 <code>dp[0][0]=0</code>，<code>dp[0][1]=−prices[0]</code>。</p>
<p>因此，我们只要从前往后依次计算状态即可。由于全部交易结束后，持有股票的收益一定低于不持有股票的收益，因此这时候 <code>dp[n−1][0]</code> 的收益必然是大于 <code>dp[n−1][1]</code> 的，最后的答案即为 <code>dp[n−1][0]</code>。</p>
<pre><code class="language-javascript">var maxProfit = function(prices) {
    const len = prices.length;
    const dp = Array(len).fill(0).map(x =&gt; Array(2).fill(0));
    dp[0][0] = 0;
    dp[0][1] = -prices[0];
    for (let i=1; i&lt;len; i++) {
        dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);
        dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0] - prices[i]);
    }
    return dp[len-1][0];
};
</code></pre>
<p><strong>空间优化</strong></p>
<p>注意到上面的状态转移方程中，每一天的状态只与前一天的状态有关，而与更早的状态都无关，因此我们不必存储这些无关的状态，只需要将 <code>dp[i−1][0]</code> 和 <code>dp[i−1][1]</code> 存放在两个变量中，通过它们计算出 <code>dp[i][0]</code> 和 <code>dp[i][1]</code> 并存回对应的变量，以便于第 i+1 天的状态转移即可。</p>
<pre><code class="language-javascript">var maxProfit = function(prices) {
    const len = prices.length;
    let dp0 = 0,
        dp1 = -prices[0];
    for (let i=1; i&lt;len; i++) {
        dp0 = Math.max(dp0, dp1 + prices[i]);
        dp1 = Math.max(dp1, dp0 - prices[i]);
    }
    return dp0;
};
</code></pre>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n 为数组的长度。一共有 2n 个状态，每次状态转移的时间复杂度为 O(1)，因此时间复杂度为 O(2n)=O(n)。</li>
<li>空间复杂度：O(n)。我们需要开辟 O(n) 空间存储动态规划中的所有状态。如果使用空间优化，空间复杂度可以优化至 O(1)。</li>
</ul>
<h3 id="方法二贪心">方法二：贪心</h3>
<p>虽然「不能同时参与多笔交易」，但是在每一笔交易中我们完全可以<strong>见好就收，积少成多</strong>，因此就有了一个大致的思路：我们可以<strong>在一天中既卖出又买入</strong>。只要第 i 天比第 i-1 天的价格高，就在第 i-1 天买入，并在第 i 天卖出。这样每一次的累计利润必然是最大的。</p>
<p>简而言之：<strong>上升区域，全部都算入利润当中</strong>。</p>
<pre><code class="language-javascript">var maxProfit = function(prices) {
    let profit = 0;
    for (let i=1; i&lt;prices.length; i++) {
        profit += Math.max(0, prices[i] - prices[i-1]);
    }
    return profit;
};
</code></pre>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n 为数组的长度。我们只需要遍历一次数组即可。</li>
<li>空间复杂度：O(1)。只需要常数空间存放若干变量。</li>
</ul>
<blockquote>
<p>来源：力扣（LeetCode）<br>
链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii</a></p>
</blockquote>
]]></content>
    </entry>
</feed>